benchx

This is small benchmark program to test the throughput of low-level drawing primitives in the X
server. It supports 16bpp and 32bpp.

*** Installation ***

Try "sudo make install". You may need to install various X development libraries to succesfully
compile. In Debian Wheezy, this includes the packages libx11-dev, libxrender-dev and
libxcomposite-dev.

*** Usage ***

Usage:
	benchx <options> <testname>

Options:

	--duration <seconds>

            The duration of each subtest in seconds. Default is 5.

	--window

            Run in a window.

	--size <pixels>

	    Specifies the size of the area to be drawn into in pixels (n x n).
            A larger size will allow subtests with a larger area to be performed.
            The default is 600.

	--noalpha

            Do not attempt to set up support for the XRenderShmImageAlpha,
            XRenderShmPixmapAlpha, and XRenderShmPixmapAlphaToPixmap tests.

	--noxrender

            Do not attempt to set up support for XRender related tests. This implies
            --noalpha. If no proper visual is detected at 32bpp, this option may help.

<testname> is one of the following:

	ScreenCopy			Screen to screen blits (using XCopyArea).
	AlignedScreenCopy		Aligned screen to screen blits (e.g. vertical scrolling).
	ScreenCopyDownwards		Downwards overlapping screen blit (has to be performed
					from bottom to top).
	ScreenCopyRightwards		Rightwards overlapping screen blit (has to be performed
					from right to left).
	FillRect			Rectangle fill.
	PutImage			Slow PutImage using Xlib communication socket.
        ShmPutImage			Fast PutImage using MIT shared memory.
        ShmPutImageFullWidth            Instead of copying only part of the width of the source image,
                                        copy the full width. This triggers an unoptimized code path
                                        in the Xorg fbdev driver.
        AlignedShmPutImage		Same but destination x-coordinate is aligned to multiple of 8.
        AlignedShmPutImageFullWidth     Copies the full with of the image.
        ShmPixmapToScreenCopy		CopyArea from shared memory pixmap to screen.
        AlignedShmPixmapToScreenCopy	Same but destination position is aligned to multiple of 8.
	PixmapCopy			Copy pixmap to another pixmap (server-side).
	PixmapFillRect			Rectangle fill of pixmap.
        Point                           Draw a single pixel using XDrawPoint.
        Line                            Draw a line using XDrawLine
        FillCircle                      Filled circle using XFillArc.
        Text8x13			Draw text with 8x13 fixed font.
        Text10x20                       Draw text with 10x20 fixed font.
        XRenderShmImage                 ShmPutimage to a pixmap and then copy to screen using XRender.
        XRenderShmImageAlpha            ShmPutimage to a pixmap with alpha component and then copy to
                                        screen using XRender with alpha blending.
        XRenderShmPixmap                Copy shared memory pixmap to screen using XRender.
        XRenderShmPixmapAlpha           Copy shared memory pixmap with alpha component to screen
                                        using XRender with alpha blending.
        XRenderShmPixmapAlphaToPixmap   Off-screen alpha blending. Copy shared memory pixmap with
					alpha to pixmap using XRender with alpha blending.
        Core                            Run core tests (the first 12).
	All				Run all tests.

Run benchx without arguments for the full list.

Running as root is helpful for accuracy but not strictly necessary.

*** Running on a bare X server ***

It is best run on a bare X server without a window manager, because otherwise the window manager
may interfere with the results. To do so, create or edit the file .xinitrc in your home directory
so that has the two lines:

	xset s off
	benchx <testname> > benchx.out

The first line disables the X screensaver. You may need other measures to disable screen saving/blanking
after a certain period. If you start the X server using startx, it will automatically run the
specified test, and the X server should exit after it is finished. A sample xinitrc file that
runs all the tests is provided.

*** Running in a window ***

With the --window option, the benchmark will run in a window. This is useful for running the program
with an X server that is already running from within the GUI environment. Results may be less accurate
that when running with a bare X server.

*** The effects of an enabled shadow framebuffer ***

In a default configuration, when using Xorg's fbdev driver or derivative, the shadow
framebuffer may be enabled. This implies that all drawing request go into an off-screen
shadow framebuffer and the actual display is only updated periodically. Running benchx
with shadow framebuffer enabled will not accurately reflect screen drawing performance,
although it may be useful in its own right for benchmarking the shadow framebuffer. To
disable the shadow framebuffer, use the following line in your xorg.conf's Device section:

	Option "ShadowFB" "off"

In Debian, the xorg.conf configuration file to edit or create may be
/usr/share/X11/xorg.conf.d/99-fbdev.conf or similar. A sample configuration file, using
fbdev, may look like this:

	Section "Device"
		Identifier "My device"
		Driver "fbdev"
		Option "ShadowFB" "off"
	EndSection

*** Interpreting results ***

The output includes the number of operations per second, the pixel bandwidth in
MB/s, and if available the user and system CPU usage of the X server. The X server
process name looked for is "Xorg". The CPU usage of benchx itself is not reported, but is should
be low, except for FillRect at small sizes (Xlib overhead for lots of small requests), and basic
PutImage at large sizes (moving large amounts of data through the X socket).

A tool to compare output results is provided (benchxcomp), which takes two output files as arguments
and shows signficant speed-ups, slow-downs and differences in X server CPU usage between the two
tests.

*** Notes ***

Note about PutImage performance:

The tests PutImage, [Aligned]ShmPutImage, [Aligned]PixmapToScreenCopy and PixmapCopy
depend highly on CPU caches. As the size of the image increases, it may no longer fit
into the L2 cache of the CPU, resulting in bandwidth decreases for the largest sizes.
